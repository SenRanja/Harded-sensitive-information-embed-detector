规则ID,描述,Commit,文件位置,凭证,密码强度,香农熵,匹配内容,开始行,结束行,开始列,结束列,提交者,提交信息,提交时间,邮箱,Commit指纹
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/@vue/compiler-ssr/registry.json,WwMkkPZpw1XGgqkXTdxsmM4ulqymPbt4yZH8o,0,4.59,"WwMkkPZpw1XGgqkXTdxsmM4ulqymPbt4yZH8o""",2,2,59587,59624,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@vue/compiler-dom/registry.json,5PsoDUn8nQkmhpIjcPAgNAwPmt5TbWnd,0,4.52,"5PsoDUn8nQkmhpIjcPAgNAwPmt5TbWnd""",2,2,126814,126846,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@vue/compiler-dom/registry.json,a0OPA8nA5WnI0ni8wy9wblQco4LBJsDu,0,4.60,"a0OPA8nA5WnI0ni8wy9wblQco4LBJsDu""",2,2,415830,415862,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@babel/parser/registry.json,XHtmJETwRvbJEp4mNQeRLLMRvvGSdPUS,0,4.39,"XHtmJETwRvbJEp4mNQeRLLMRvvGSdPUS""",2,2,178859,178891,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@babel/parser/registry.json,AAJz3dRM6d0VeL8afb9HgSwu2FRRSu5J,0,4.54,"AAJz3dRM6d0VeL8afb9HgSwu2FRRSu5J""",2,2,426480,426512,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@vue/reactivity/registry.json,NhNbFxM1OlgCGZQyMsaphXuDG2wBC9XL,0,4.62,"NhNbFxM1OlgCGZQyMsaphXuDG2wBC9XL""",2,2,296610,296642,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/@vue/reactivity/registry.json,8UzdZXq10e5NEFf8ltM4aOvOTFUYgbFwuOzHX,0,4.74,"8UzdZXq10e5NEFf8ltM4aOvOTFUYgbFwuOzHX""",2,2,217237,217274,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@vue/compiler-sfc/registry.json,ko7VaLwwJVLUz9mnariCkXk4WCRdMG7m,0,4.41,"ko7VaLwwJVLUz9mnariCkXk4WCRdMG7m""",2,2,501024,501056,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/@vue/compiler-sfc/registry.json,k0RuZz8i2jDRF1uv2ktteTptmHGpWYiNDdkX9,0,4.63,"k0RuZz8i2jDRF1uv2ktteTptmHGpWYiNDdkX9""",2,2,450745,450782,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/@vue/runtime-dom/registry.json,95xHkS5KMYtY1dvMNOqcefX7X0omEYPlCPiTi,0,4.81,"95xHkS5KMYtY1dvMNOqcefX7X0omEYPlCPiTi""",2,2,284582,284619,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@vue/shared/registry.json,QCDSnfn6lOM9vWrA2PUaV6grT30akwhW,0,4.69,"QCDSnfn6lOM9vWrA2PUaV6grT30akwhW""",2,2,145078,145110,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/chalk/registry.json,e31MGrLVolFCW6IA03RVeQP3vX11l1fh,0,4.41,"e31MGrLVolFCW6IA03RVeQP3vX11l1fh""",1,1,60456,60488,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/@vue/server-renderer/registry.json,NBiex4XYy6mOAefaI2cftnC4dtg15JHA,0,4.69,"NBiex4XYy6mOAefaI2cftnC4dtg15JHA""",2,2,331439,331471,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/ssh2/registry.json,1353254750,0,2.65,": 1353254750,",2,2,177132,177144,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/ssh2/registry.json,1353254744,0,2.45,: 1353254744 ,2,2,177162,177174,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/ssh2/registry.json,1353269007,0,2.92,": 1353269007,",2,2,177417,177429,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/ssh2/registry.json,1353269007,0,2.92,: 1353269007 ,2,2,177447,177459,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/ssh2/registry.json,QydGFAziZjTlvXGdPPLaQb4ynLkKTxY6,0,4.56,"QydGFAziZjTlvXGdPPLaQb4ynLkKTxY6""",2,2,164817,164849,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/type-detect/registry.json,IyhCBpsEME88N4yT7ehx8iSHiqIzzHfRM0Jd5,0,4.65,"IyhCBpsEME88N4yT7ehx8iSHiqIzzHfRM0Jd5""",1,1,5521,5558,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/scheduler/registry.json,ZBJb0XcyzJrBNjiIdEM0WK4umCLkJTyLf7ALb,0,4.74,"ZBJb0XcyzJrBNjiIdEM0WK4umCLkJTyLf7ALb""",1,1,2778,2815,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/wrap-ansi/registry.json,ZMHbSM28cxTwdhxTNqb3PPvcEDg9Fjq8,0,4.50,"ZMHbSM28cxTwdhxTNqb3PPvcEDg9Fjq8""",1,1,11037,11069,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/react-dom/registry.json,6ZD5E911w6pmttBeRRKtdb7ukFptBBvX,0,4.35,"6ZD5E911w6pmttBeRRKtdb7ukFptBBvX""",1,1,454918,454950,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/react-dom/registry.json,m7CRBNRNev5dXgsVFD1tV0aGo9PcFD8uolS6s,0,4.83,"m7CRBNRNev5dXgsVFD1tV0aGo9PcFD8uolS6s""",1,1,111301,111338,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/postcss/registry.json,b2XYR9wu3fO4LVXql4xf2lmNpxjVR016,0,4.50,"b2XYR9wu3fO4LVXql4xf2lmNpxjVR016""",2,2,115342,115374,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/postcss/registry.json,osAe35chGqdTe4rm9ncnUvDUVGCPApdL,0,4.56,"osAe35chGqdTe4rm9ncnUvDUVGCPApdL""",2,2,463532,463564,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/postcss/registry.json,zG60ToJiECpcwXyNnk06YwbhR2kEhIDO,0,4.62,"zG60ToJiECpcwXyNnk06YwbhR2kEhIDO""",2,2,504566,504598,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/postcss/registry.json,326060588,0,2.50,"""326060588""",2,2,569593,569603,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/react/registry.json,17727491394,0,2.48,"""17727491394""",1,1,933809,933821,,,,,
tencent QQ,腾讯QQ,,cli/tests/testdata/npm/registry/react/registry.json,18670232733,0,2.66,"""18670232733""",1,1,933844,933856,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/react/registry.json,SeAH3mUN1VoWv6bAWA0dHKfn2zTzeXx3,0,4.54,"SeAH3mUN1VoWv6bAWA0dHKfn2zTzeXx3""",1,1,396445,396477,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/react/registry.json,WLOXitEYryjV0Mc46jCin8UjGYJaFzKsaKHic,0,4.74,"WLOXitEYryjV0Mc46jCin8UjGYJaFzKsaKHic""",1,1,204065,204102,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/react/registry.json,GrzWC5lndQXClBzEJF5kAed7ao319GU5ui6as,0,4.76,"GrzWC5lndQXClBzEJF5kAed7ao319GU5ui6as""",1,1,441643,441680,,,,,
private-key,证书--Private Key,,cli/tests/testdata/tls/RootCA.key,"-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDMH/IO2qtHfyBK
wANNPB4K0q5JVSg8XxZdRpTTlz0CwU0oRO3uHrI52raCCfVeiQutyZopeFZTDWeX
GudGAFA2B5m3orWt0s+touPi8MzjsG2TQ+WSI66QgbXTNDitDDBtTVcV5G3Ic+3S
ppQAYiHSekLISnYWgXLl+k5CnEfTowg6cjqjVr0KjL03cTN3H7b+6+0Sws4rYbW1
j4ExR7K6BFNH6572yq5qR20E6GqlY+EcOZpw4CbCk9lS8/CWuXze/vMsOfDcc6K+
B625d27wyEGZHedBomT2vAD7sBjvO8hn/DP1Qb46a8uCHR6NSfnJ7bXOG1igaIbg
Y1zXirNdAgMBAAECggEASvdsicILZ42ryWgtjj8G9Yick7gft9RgPU9/txnzQUDG
2oQ+Mda6M/88ShPoNpj0XhYNdS+J3KSup9MsnwvcaYtvC/9I5BbpSObq9NzlErYn
+A7WkE5kfRP2OCQUsJEqc+oUkqi7HQRekp+0+VMRAuD+B9s49VkDXq0H8vS8eF/e
J9nj6c/RTK+Er5ccG5jSLrSy3kiIjAN1a6OIU/YPjPx7qv8ZZ6TLeRtvc8PV++cH
wB1qapZg5cuKge9UEcg+WINCkD2n9iK1jKC1ULYsiuwUR6LX9YHLUwr6S5/Dwwqc
Vb9nmftqJtCz+McrqRCdfeqSNGi0tjVEX7i+DtfZrQKBgQD7firgBE7nb53VDirG
W8Leo6EhCS/hCZFo0QhSBUCeOpmSaMsCzUIlqqPIBIQXir0AtBno/qXYiIJ4HgUB
lScrK+7KUirEO8o4x6xC2hbPk/A7fTgf0G5Mvj2TRidiLGGIupuRHeyjigiGa0mG
yWLoil6MJX44usnE49qDVy77/wKBgQDPyHThAugFSsVedxy29NQx7Zp8s/htpGHZ
wYksbunz+NlO/xzRvSu2OAps/WD6F+3KhCB5fV2tESVs7u2oQPLcjmIpurDtATWE
DJAAvcBl1L+cpQGN4D8zUrrZO8rw01sUZSv+kAnfsC01exzZe64+VDl3a1cYZkDT
A9RmbF/AowKBgDTYVxQJc7cH6idZub1CjNkRkwsJDimARDC9M71gYyqcb6anJHlr
PgoCKDYgVM1Jlttt/L/Lunecf6XT0QN7HubgbWXQDDJ9yclSk6zcfMyTbnhhoIh2
2KaBlxi6Ng5X+wqrA4NjwVS/7XipVKLg8EqiwKk8O6CaB0m7AzB0AmhrAoGAcGsi
YYNzCTn1IzEKxiocjI7jYMj2hkvD7U766qFvzuI6oLUCYLAa8FHNwj4ss+Mycrmd
4F1ly3dVamSzDK9nNtGKZs1tYC2hSLqLRvtjFzVOHnBgMOS9DQWbtmDVYgrYYmaC
sQ45aV8mdqMPbtOt6GclWGkpDDh2pjSSPIAyJkUCgYAHw7dKqYO/YQPKmswVZm5t
TelfdJJG6GCXnFryyqo4pmEMy/i5kzF1t9Cnchhx/WeU+wGxrWd3RMP/sqP7MW9q
6Ie9Jj2vk4lUBoeFKk+kLeBUr+TkLSdcVEI0DSOdX681AUmxkVzVjGKYeiNa+V6u
XmgzS8JEYoMbNEAKXYX2qg==
-----END PRIVATE KEY----",0,6.01,"-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDMH/IO2qtHfyBK
wANNPB4K0q5JVSg8XxZdRpTTlz0CwU0oRO3uHrI52raCCfVeiQutyZopeFZTDWeX
GudGAFA2B5m3orWt0s+touPi8MzjsG2TQ+WSI66QgbXTNDitDDBtTVcV5G3Ic+3S
ppQAYiHSekLISnYWgXLl+k5CnEfTowg6cjqjVr0KjL03cTN3H7b+6+0Sws4rYbW1
j4ExR7K6BFNH6572yq5qR20E6GqlY+EcOZpw4CbCk9lS8/CWuXze/vMsOfDcc6K+
B625d27wyEGZHedBomT2vAD7sBjvO8hn/DP1Qb46a8uCHR6NSfnJ7bXOG1igaIbg
Y1zXirNdAgMBAAECggEASvdsicILZ42ryWgtjj8G9Yick7gft9RgPU9/txnzQUDG
2oQ+Mda6M/88ShPoNpj0XhYNdS+J3KSup9MsnwvcaYtvC/9I5BbpSObq9NzlErYn
+A7WkE5kfRP2OCQUsJEqc+oUkqi7HQRekp+0+VMRAuD+B9s49VkDXq0H8vS8eF/e
J9nj6c/RTK+Er5ccG5jSLrSy3kiIjAN1a6OIU/YPjPx7qv8ZZ6TLeRtvc8PV++cH
wB1qapZg5cuKge9UEcg+WINCkD2n9iK1jKC1ULYsiuwUR6LX9YHLUwr6S5/Dwwqc
Vb9nmftqJtCz+McrqRCdfeqSNGi0tjVEX7i+DtfZrQKBgQD7firgBE7nb53VDirG
W8Leo6EhCS/hCZFo0QhSBUCeOpmSaMsCzUIlqqPIBIQXir0AtBno/qXYiIJ4HgUB
lScrK+7KUirEO8o4x6xC2hbPk/A7fTgf0G5Mvj2TRidiLGGIupuRHeyjigiGa0mG
yWLoil6MJX44usnE49qDVy77/wKBgQDPyHThAugFSsVedxy29NQx7Zp8s/htpGHZ
wYksbunz+NlO/xzRvSu2OAps/WD6F+3KhCB5fV2tESVs7u2oQPLcjmIpurDtATWE
DJAAvcBl1L+cpQGN4D8zUrrZO8rw01sUZSv+kAnfsC01exzZe64+VDl3a1cYZkDT
A9RmbF/AowKBgDTYVxQJc7cH6idZub1CjNkRkwsJDimARDC9M71gYyqcb6anJHlr
PgoCKDYgVM1Jlttt/L/Lunecf6XT0QN7HubgbWXQDDJ9yclSk6zcfMyTbnhhoIh2
2KaBlxi6Ng5X+wqrA4NjwVS/7XipVKLg8EqiwKk8O6CaB0m7AzB0AmhrAoGAcGsi
YYNzCTn1IzEKxiocjI7jYMj2hkvD7U766qFvzuI6oLUCYLAa8FHNwj4ss+Mycrmd
4F1ly3dVamSzDK9nNtGKZs1tYC2hSLqLRvtjFzVOHnBgMOS9DQWbtmDVYgrYYmaC
sQ45aV8mdqMPbtOt6GclWGkpDDh2pjSSPIAyJkUCgYAHw7dKqYO/YQPKmswVZm5t
TelfdJJG6GCXnFryyqo4pmEMy/i5kzF1t9Cnchhx/WeU+wGxrWd3RMP/sqP7MW9q
6Ie9Jj2vk4lUBoeFKk+kLeBUr+TkLSdcVEI0DSOdX681AUmxkVzVjGKYeiNa+V6u
XmgzS8JEYoMbNEAKXYX2qg==
-----END PRIVATE KEY----",1,28,1,25,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/tls/localhost.crt,bU7ejx1mu9A95wpQ9SCL2cRkAlz2LDOy,0,4.66,bU7ejx1mu9A95wpQ9SCL2cRkAlz2LDOy,11,12,34,1,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/tls/localhost.crt,4hshECY5mnx4Hhy7IAbePDsTTbSm01dChhlxF,0,4.52,4hshECY5mnx4Hhy7IAbePDsTTbSm01dChhlxF,8,9,29,1,,,,,
private-key,证书--Private Key,,cli/tests/testdata/tls/localhost.key,"-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDP2y+NV1/mOKFQ
G2h93zhcp1vx0QdBEl8M0pongCttqowcB2eqL99a2WoQQyfyDB5nv7iGyEQJjmaf
HgeHLsgBt48OxNNtKbTV0KGGXEW6931C6/O+upKNKr6/gmVq76lAiFTPNXXZ0Xls
W+sisZbEJmn5buUsNkjo93pK77Jkh6LCtRo8zN1R481/aFkj8i9YJQwIjKiqusod
0eg+69AJbXsjLGycVAk1uY35G2kFCKWG3C8FuCAIFaEfER2KoFpkcPDpmX5tTt6P
HWa70D3nClD1IIvZxGQCXPYsM7LDOetMDAZy+q8UrGVX7cexoPuttriQIDUiGnma
b91LaT3hAgMBAAECggEBAJABfn+BQorBP1m9s3ZJmcXvmW7+7/SwYrQCkRS+4te2
6h1dMAAj7K4HpUkhDeLPbJ1aoeCXjTPFuemRp4uL6Lvvzahgy059L7FXOyFYemMf
pmQgDx5cKr6tF7yc/eDJrExuZ7urgTvouiRNxqmhuh+psZBDuXkZHwhwtQSH7uNg
KBDKu0qWO73vFLcLckdGEU3+H9oIWs5xcvvOkWzyvHbRGFJSihgcRpPPHodF5xB9
T/gZIoJHMmCbUMlWaSasUyNXTuvCnkvBDol8vXrMJCVzKZj9GpPDcIFdc08GSn4I
pTdSNwzUcHbdERzdVU28Xt+t6W5rvp/4FWrssi4IzkUCgYEA//ZcEcBguRD4OFrx
6wbSjzCcUW1NWhzA8uTOORZi4SvndcH1cU4S2wznuHNubU1XlrGwJX6PUGebmY/l
53B5PJvStbVtZCVIxllR+ZVzRuL8wLodRHzlYH8GOzHwoa4ivSupkzl72ij1u/tI
NMLGfYEKVdNd8zXIESUY88NszvsCgYEAz+MDp3xOhFaCe+CPv80A592cJcfzc8Al
+rahEOu+VdN2QBZf86PIf2Bfv/t0QvnRvs1z648TuH6h83YSggOAbmfHyd789jkq
UWlktIaXbVn+VaHmPTcBWTg3ZTlvG+fiFCbZXiYhm+UUf1MDqZHdiifAoyVIjV/Z
YhCNJo3q39MCgYEAknrpK5t9fstwUcfyA/9OhnVaL9suVjB4V0iLn+3ovlXCywgp
ryLv9X3IKi2c9144jtu3I23vFCOGz3WjKzSZnQ7LogNmy9XudNxu5jcZ1mpWHPEl
iKk1F2j6Juwoek5OQRX4oHFYKHwiTOa75r3Em9Q6Fu20KVgQ24bwZafj3/sCgYAy
k0AoVw2jFIjaKl/Ogclen4OFjYek+XJD9Hpq62964d866Dafx5DXrFKfGkXGpZBp
owI4pK5fjC9KU8dc6g0szwLEEgPowy+QbtuZL8VXTTWbD7A75E3nrs2LStXFLDzM
OkdXqF801h6Oe1vAvUPwgItVJZTpEBCK0wwD/TLPEQKBgQDRkhlTtAoHW7W6STd0
A/OWc0dxhzMurpxg0bLgCqUjw1ESGrSCGhffFn0IWa8sv19VWsZuBhTgjNatZsYB
AhDs/6OosT/3nJoh2/t0hYDj1FBI0lPXWYD4pesuZ5yIMrmSaAOtIzp4BGY7ui8N
wOqcq/jdiHj/MKEdqOXy3YAJrA==
-----END PRIVATE KEY----",0,6.03,"-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDP2y+NV1/mOKFQ
G2h93zhcp1vx0QdBEl8M0pongCttqowcB2eqL99a2WoQQyfyDB5nv7iGyEQJjmaf
HgeHLsgBt48OxNNtKbTV0KGGXEW6931C6/O+upKNKr6/gmVq76lAiFTPNXXZ0Xls
W+sisZbEJmn5buUsNkjo93pK77Jkh6LCtRo8zN1R481/aFkj8i9YJQwIjKiqusod
0eg+69AJbXsjLGycVAk1uY35G2kFCKWG3C8FuCAIFaEfER2KoFpkcPDpmX5tTt6P
HWa70D3nClD1IIvZxGQCXPYsM7LDOetMDAZy+q8UrGVX7cexoPuttriQIDUiGnma
b91LaT3hAgMBAAECggEBAJABfn+BQorBP1m9s3ZJmcXvmW7+7/SwYrQCkRS+4te2
6h1dMAAj7K4HpUkhDeLPbJ1aoeCXjTPFuemRp4uL6Lvvzahgy059L7FXOyFYemMf
pmQgDx5cKr6tF7yc/eDJrExuZ7urgTvouiRNxqmhuh+psZBDuXkZHwhwtQSH7uNg
KBDKu0qWO73vFLcLckdGEU3+H9oIWs5xcvvOkWzyvHbRGFJSihgcRpPPHodF5xB9
T/gZIoJHMmCbUMlWaSasUyNXTuvCnkvBDol8vXrMJCVzKZj9GpPDcIFdc08GSn4I
pTdSNwzUcHbdERzdVU28Xt+t6W5rvp/4FWrssi4IzkUCgYEA//ZcEcBguRD4OFrx
6wbSjzCcUW1NWhzA8uTOORZi4SvndcH1cU4S2wznuHNubU1XlrGwJX6PUGebmY/l
53B5PJvStbVtZCVIxllR+ZVzRuL8wLodRHzlYH8GOzHwoa4ivSupkzl72ij1u/tI
NMLGfYEKVdNd8zXIESUY88NszvsCgYEAz+MDp3xOhFaCe+CPv80A592cJcfzc8Al
+rahEOu+VdN2QBZf86PIf2Bfv/t0QvnRvs1z648TuH6h83YSggOAbmfHyd789jkq
UWlktIaXbVn+VaHmPTcBWTg3ZTlvG+fiFCbZXiYhm+UUf1MDqZHdiifAoyVIjV/Z
YhCNJo3q39MCgYEAknrpK5t9fstwUcfyA/9OhnVaL9suVjB4V0iLn+3ovlXCywgp
ryLv9X3IKi2c9144jtu3I23vFCOGz3WjKzSZnQ7LogNmy9XudNxu5jcZ1mpWHPEl
iKk1F2j6Juwoek5OQRX4oHFYKHwiTOa75r3Em9Q6Fu20KVgQ24bwZafj3/sCgYAy
k0AoVw2jFIjaKl/Ogclen4OFjYek+XJD9Hpq62964d866Dafx5DXrFKfGkXGpZBp
owI4pK5fjC9KU8dc6g0szwLEEgPowy+QbtuZL8VXTTWbD7A75E3nrs2LStXFLDzM
OkdXqF801h6Oe1vAvUPwgItVJZTpEBCK0wwD/TLPEQKBgQDRkhlTtAoHW7W6STd0
A/OWc0dxhzMurpxg0bLgCqUjw1ESGrSCGhffFn0IWa8sv19VWsZuBhTgjNatZsYB
AhDs/6OosT/3nJoh2/t0hYDj1FBI0lPXWYD4pesuZ5yIMrmSaAOtIzp4BGY7ui8N
wOqcq/jdiHj/MKEdqOXy3YAJrA==
-----END PRIVATE KEY----",1,28,1,25,,,,,
tencent QQ,腾讯QQ,,cli/tests/unit/buffer_test.ts,536870888,0,2.28," = 536870888 ",451,451,33,45,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/yargs-parser/registry.json,QzZl4rvxc90PAEwnuwxejSl00bIOB8Yv,0,4.60,"QzZl4rvxc90PAEwnuwxejSl00bIOB8Yv""",1,1,26565,26597,,,,,
tencent QQ,腾讯QQ,,cli/tests/unit/read_text_file_test.ts,536870888,0,2.28," = 536870888 ",152,152,35,47,,,,,
tencent QQ,腾讯QQ,,cli/tests/unit/read_text_file_test.ts,536870888,0,2.28," = 536870888 ",173,173,35,47,,,,,
private-key,证书--Private Key,,cli/tests/unit/webcrypto_test.ts,"-----BEGIN PRIVATE KEY-----"";
  const pemFooter = ""-----END PRIVATE KEY-----"";
  for (const { pem, hash } of pkcs8TestVectors) {
    const keyFile = await Deno.readTextFile(pem);
    const pemContents = keyFile.substring(
      pemHeader.length,
      keyFile.length - pemFooter.length,
    );
    const binaryDerString = atob(pemContents);
    const binaryDer = new Uint8Array(binaryDerString.length);
    for (let i = 0; i < binaryDerString.length; i++) {
      binaryDer[i] = binaryDerString.charCodeAt(i);
    }

    const key = await crypto.subtle.importKey(
      ""pkcs8"",
      binaryDer,
      { name: ""RSA-PSS"", hash },
      true,
      [""sign""],
    );

    assert(key);
    assertEquals(key.type, ""private"");
    assertEquals(key.extractable, true);
    assertEquals(key.usages, [""sign""]);
    const algorithm = key.algorithm as RsaHashedKeyAlgorithm;
    assertEquals(algorithm.name, ""RSA-PSS"");
    assertEquals(algorithm.hash.name, hash);
    assertEquals(algorithm.modulusLength, 2048);
    assertEquals(algorithm.publicExponent, new Uint8Array([1, 0, 1]));
  }
});

const nonInteroperableVectors = [
  // id-RSASSA-PSS (sha256)
  // `openssl genpkey -algorithm rsa-pss -pkeyopt rsa_pss_keygen_md:sha256 -out id_rsassaPss.pem`
  { pem: ""cli/tests/testdata/webcrypto/id_rsassaPss.pem"", hash: ""SHA-256"" },
  // id-RSASSA-PSS (default parameters)
  // `openssl genpkey -algorithm rsa-pss -out id_rsassaPss.pem`
  {
    pem: ""cli/tests/testdata/webcrypto/id_rsassaPss_default.pem"",
    hash: ""SHA-1"",
  },
  // id-RSASSA-PSS (default hash)
  // `openssl genpkey -algorithm rsa-pss -pkeyopt rsa_pss_keygen_saltlen:30 -out rsaPss_saltLen_30.pem`
  {
    pem: ""cli/tests/testdata/webcrypto/id_rsassaPss_saltLen_30.pem"",
    hash: ""SHA-1"",
  },
];

Deno.test(
  { permissions: { read: true } },
  async function importNonInteroperableRsaPkcs8() {
    const pemHeader = ""-----BEGIN PRIVATE KEY-----"";
    const pemFooter = ""-----END PRIVATE KEY----",0,5.10,"-----BEGIN PRIVATE KEY-----"";
  const pemFooter = ""-----END PRIVATE KEY-----"";
  for (const { pem, hash } of pkcs8TestVectors) {
    const keyFile = await Deno.readTextFile(pem);
    const pemContents = keyFile.substring(
      pemHeader.length,
      keyFile.length - pemFooter.length,
    );
    const binaryDerString = atob(pemContents);
    const binaryDer = new Uint8Array(binaryDerString.length);
    for (let i = 0; i < binaryDerString.length; i++) {
      binaryDer[i] = binaryDerString.charCodeAt(i);
    }

    const key = await crypto.subtle.importKey(
      ""pkcs8"",
      binaryDer,
      { name: ""RSA-PSS"", hash },
      true,
      [""sign""],
    );

    assert(key);
    assertEquals(key.type, ""private"");
    assertEquals(key.extractable, true);
    assertEquals(key.usages, [""sign""]);
    const algorithm = key.algorithm as RsaHashedKeyAlgorithm;
    assertEquals(algorithm.name, ""RSA-PSS"");
    assertEquals(algorithm.hash.name, hash);
    assertEquals(algorithm.modulusLength, 2048);
    assertEquals(algorithm.publicExponent, new Uint8Array([1, 0, 1]));
  }
});

const nonInteroperableVectors = [
  // id-RSASSA-PSS (sha256)
  // `openssl genpkey -algorithm rsa-pss -pkeyopt rsa_pss_keygen_md:sha256 -out id_rsassaPss.pem`
  { pem: ""cli/tests/testdata/webcrypto/id_rsassaPss.pem"", hash: ""SHA-256"" },
  // id-RSASSA-PSS (default parameters)
  // `openssl genpkey -algorithm rsa-pss -out id_rsassaPss.pem`
  {
    pem: ""cli/tests/testdata/webcrypto/id_rsassaPss_default.pem"",
    hash: ""SHA-1"",
  },
  // id-RSASSA-PSS (default hash)
  // `openssl genpkey -algorithm rsa-pss -pkeyopt rsa_pss_keygen_saltlen:30 -out rsaPss_saltLen_30.pem`
  {
    pem: ""cli/tests/testdata/webcrypto/id_rsassaPss_saltLen_30.pem"",
    hash: ""SHA-1"",
  },
];

Deno.test(
  { permissions: { read: true } },
  async function importNonInteroperableRsaPkcs8() {
    const pemHeader = ""-----BEGIN PRIVATE KEY-----"";
    const pemFooter = ""-----END PRIVATE KEY----",391,447,23,48,,,,,
private-key,证书--Private Key,,cli/tsc/dts/lib.deno.unstable.d.ts,"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"";
   * Deno.serve({ cert, key }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * @category HTTP Server
   */
  export function serve(
    handler: ServeHandler,
    options?: ServeOptions | ServeTlsOptions,
  ): Promise<void>;
  /** **UNSTABLE**: New API, yet to be vetted.
   *
   * Serves HTTP requests with the given handler.
   *
   * You can specify an object with a port and hostname option, which is the
   * address to listen on. The default is port `9000` on hostname `""127.0.0.1""`.
   *
   * The below example serves with the port `9000`.
   *
   * ```ts
   * Deno.serve((_req) => new Response(""Hello, world""));
   * ```
   *
   * You can change the address to listen on using the `hostname` and `port`
   * options. The below example serves on port `3000`.
   *
   * ```ts
   * Deno.serve({ port: 3000 }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * You can stop the server with an {@linkcode AbortSignal}. The abort signal
   * needs to be passed as the `signal` option in the options bag. The server
   * aborts when the abort signal is aborted. To wait for the server to close,
   * await the promise returned from the `Deno.serve` API.
   *
   * ```ts
   * const ac = new AbortController();
   *
   * Deno.serve({ signal: ac.signal }, (_req) => new Response(""Hello, world""))
   *  .then(() => console.log(""Server closed""));
   *
   * console.log(""Closing server..."");
   * ac.abort();
   * ```
   *
   * By default `Deno.serve` prints the message
   * `Listening on http://<hostname>:<port>/` on listening. If you like to
   * change this behavior, you can specify a custom `onListen` callback.
   *
   * ```ts
   * Deno.serve({
   *   onListen({ port, hostname }) {
   *     console.log(`Server started at http://${hostname}:${port}`);
   *     // ... more info specific to your server ..
   *   },
   *   handler: (_req) => new Response(""Hello, world""),
   * });
   * ```
   *
   * To enable TLS you must specify the `key` and `cert` options.
   *
   * ```ts
   * const cert = ""-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"";
   * const key = ""-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"";
   * Deno.serve({ cert, key }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * @category HTTP Server
   */
  export function serve(
    options: ServeOptions | ServeTlsOptions,
    handler: ServeHandler,
  ): Promise<void>;
  /** **UNSTABLE**: New API, yet to be vetted.
   *
   * Serves HTTP requests with the given handler.
   *
   * You can specify an object with a port and hostname option, which is the
   * address to listen on. The default is port `9000` on hostname `""127.0.0.1""`.
   *
   * The below example serves with the port `9000`.
   *
   * ```ts
   * Deno.serve((_req) => new Response(""Hello, world""));
   * ```
   *
   * You can change the address to listen on using the `hostname` and `port`
   * options. The below example serves on port `3000`.
   *
   * ```ts
   * Deno.serve({ port: 3000 }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * You can stop the server with an {@linkcode AbortSignal}. The abort signal
   * needs to be passed as the `signal` option in the options bag. The server
   * aborts when the abort signal is aborted. To wait for the server to close,
   * await the promise returned from the `Deno.serve` API.
   *
   * ```ts
   * const ac = new AbortController();
   *
   * Deno.serve({ signal: ac.signal }, (_req) => new Response(""Hello, world""))
   *  .then(() => console.log(""Server closed""));
   *
   * console.log(""Closing server..."");
   * ac.abort();
   * ```
   *
   * By default `Deno.serve` prints the message
   * `Listening on http://<hostname>:<port>/` on listening. If you like to
   * change this behavior, you can specify a custom `onListen` callback.
   *
   * ```ts
   * Deno.serve({
   *   onListen({ port, hostname }) {
   *     console.log(`Server started at http://${hostname}:${port}`);
   *     // ... more info specific to your server ..
   *   },
   *   handler: (_req) => new Response(""Hello, world""),
   * });
   * ```
   *
   * To enable TLS you must specify the `key` and `cert` options.
   *
   * ```ts
   * const cert = ""-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"";
   * const key = ""-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY----",0,4.89,"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"";
   * Deno.serve({ cert, key }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * @category HTTP Server
   */
  export function serve(
    handler: ServeHandler,
    options?: ServeOptions | ServeTlsOptions,
  ): Promise<void>;
  /** **UNSTABLE**: New API, yet to be vetted.
   *
   * Serves HTTP requests with the given handler.
   *
   * You can specify an object with a port and hostname option, which is the
   * address to listen on. The default is port `9000` on hostname `""127.0.0.1""`.
   *
   * The below example serves with the port `9000`.
   *
   * ```ts
   * Deno.serve((_req) => new Response(""Hello, world""));
   * ```
   *
   * You can change the address to listen on using the `hostname` and `port`
   * options. The below example serves on port `3000`.
   *
   * ```ts
   * Deno.serve({ port: 3000 }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * You can stop the server with an {@linkcode AbortSignal}. The abort signal
   * needs to be passed as the `signal` option in the options bag. The server
   * aborts when the abort signal is aborted. To wait for the server to close,
   * await the promise returned from the `Deno.serve` API.
   *
   * ```ts
   * const ac = new AbortController();
   *
   * Deno.serve({ signal: ac.signal }, (_req) => new Response(""Hello, world""))
   *  .then(() => console.log(""Server closed""));
   *
   * console.log(""Closing server..."");
   * ac.abort();
   * ```
   *
   * By default `Deno.serve` prints the message
   * `Listening on http://<hostname>:<port>/` on listening. If you like to
   * change this behavior, you can specify a custom `onListen` callback.
   *
   * ```ts
   * Deno.serve({
   *   onListen({ port, hostname }) {
   *     console.log(`Server started at http://${hostname}:${port}`);
   *     // ... more info specific to your server ..
   *   },
   *   handler: (_req) => new Response(""Hello, world""),
   * });
   * ```
   *
   * To enable TLS you must specify the `key` and `cert` options.
   *
   * ```ts
   * const cert = ""-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"";
   * const key = ""-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"";
   * Deno.serve({ cert, key }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * @category HTTP Server
   */
  export function serve(
    options: ServeOptions | ServeTlsOptions,
    handler: ServeHandler,
  ): Promise<void>;
  /** **UNSTABLE**: New API, yet to be vetted.
   *
   * Serves HTTP requests with the given handler.
   *
   * You can specify an object with a port and hostname option, which is the
   * address to listen on. The default is port `9000` on hostname `""127.0.0.1""`.
   *
   * The below example serves with the port `9000`.
   *
   * ```ts
   * Deno.serve((_req) => new Response(""Hello, world""));
   * ```
   *
   * You can change the address to listen on using the `hostname` and `port`
   * options. The below example serves on port `3000`.
   *
   * ```ts
   * Deno.serve({ port: 3000 }, (_req) => new Response(""Hello, world""));
   * ```
   *
   * You can stop the server with an {@linkcode AbortSignal}. The abort signal
   * needs to be passed as the `signal` option in the options bag. The server
   * aborts when the abort signal is aborted. To wait for the server to close,
   * await the promise returned from the `Deno.serve` API.
   *
   * ```ts
   * const ac = new AbortController();
   *
   * Deno.serve({ signal: ac.signal }, (_req) => new Response(""Hello, world""))
   *  .then(() => console.log(""Server closed""));
   *
   * console.log(""Closing server..."");
   * ac.abort();
   * ```
   *
   * By default `Deno.serve` prints the message
   * `Listening on http://<hostname>:<port>/` on listening. If you like to
   * change this behavior, you can specify a custom `onListen` callback.
   *
   * ```ts
   * Deno.serve({
   *   onListen({ port, hostname }) {
   *     console.log(`Server started at http://${hostname}:${port}`);
   *     // ... more info specific to your server ..
   *   },
   *   handler: (_req) => new Response(""Hello, world""),
   * });
   * ```
   *
   * To enable TLS you must specify the `key` and `cert` options.
   *
   * ```ts
   * const cert = ""-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"";
   * const key = ""-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY----",1227,1353,20,77,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,GI0dbvSinMCItUtQEEXTOwd71odINiO6,0,4.45,"GI0dbvSinMCItUtQEEXTOwd71odINiO6""",1,1,1280557,1280589,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,KhnfAq7sEx7rD2RAHn2CnBJlAqMd3TRd,0,4.39,"KhnfAq7sEx7rD2RAHn2CnBJlAqMd3TRd""",1,1,1402025,1402057,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,i5M2bOqAJnQRuOUcjHq4kID6YcHFCSqH8Cjlj,0,4.66,"i5M2bOqAJnQRuOUcjHq4kID6YcHFCSqH8Cjlj""",1,1,32741,32778,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,ZSXlAPjLpME6OV6Ds2AdjYt7pT3Y7x7Q2UJzD,0,4.70,"ZSXlAPjLpME6OV6Ds2AdjYt7pT3Y7x7Q2UJzD""",1,1,57824,57861,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,WMe7qGGpJ9ULekCU3ptAAIXYwAihEsBO3fdl9,0,4.76,"WMe7qGGpJ9ULekCU3ptAAIXYwAihEsBO3fdl9""",1,1,64415,64452,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,tcfHIaiRgrePb0GPxb3aLioGPLRsFxKmB2kLG,0,4.55,"tcfHIaiRgrePb0GPxb3aLioGPLRsFxKmB2kLG""",1,1,145920,145957,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,xIvbgKCwgNVY45v9CzGnsgL4FJFlJK2qxFW7J,0,4.55,"xIvbgKCwgNVY45v9CzGnsgL4FJFlJK2qxFW7J""",1,1,338102,338139,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/ajv/registry.json,dhPD52JOxObm4cbo8F8dB9RWfZHSkDEgYKCeG,0,4.94,"dhPD52JOxObm4cbo8F8dB9RWfZHSkDEgYKCeG""",1,1,1446330,1446367,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/yargs/registry.json,whCNupStQIQZxht1MQXgt9kRPIpB1osa,0,4.45,"whCNupStQIQZxht1MQXgt9kRPIpB1osa""",1,1,9223,9255,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/yargs/registry.json,Ba4PGTJLy1UKvE6UOQWLp4iiuZkjOKuX,0,4.56,"Ba4PGTJLy1UKvE6UOQWLp4iiuZkjOKuX""",1,1,623063,623095,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,536870912,0,3.17," = 536870912,",562,562,26,38,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,268435456,0,2.50," = 268435456,",2441,2441,45,57,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,536870912,0,3.17," = 536870912,",2442,2442,25,37,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,268435456,0,2.50," = 268435456,",2472,2472,45,57,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,536870912,0,3.17," = 536870912,",2473,2473,25,37,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,134217728,0,2.50," = 134217728,",2556,2556,23,35,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,134217728,0,2.50," = 134217728,",2666,2666,25,37,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,268435456,0,2.50," = 268435456,",2667,2667,23,35,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,402653316,0,2.73," = 402653316,",2672,2672,20,32,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,465829888,0,2.28," = 465829888,",2684,2684,22,34,,,,,
tencent QQ,腾讯QQ,,cli/tsc/dts/typescript.d.ts,536624127,0,2.73," = 536624127,",2686,2686,20,32,,,,,
private-key,证书--Private Key,,ext/tls/lib.rs,"-----BEGIN RSA PRIVATE KEY-----
fn load_rsa_keys(mut bytes: &[u8]) -> Result<Vec<PrivateKey>, AnyError> {
  let keys = rsa_private_keys(&mut bytes).map_err(|_| key_decode_err())?;
  Ok(keys.into_iter().map(PrivateKey).collect())
}

/// Starts with -----BEGIN PRIVATE KEY----",0,5.23,"-----BEGIN RSA PRIVATE KEY-----
fn load_rsa_keys(mut bytes: &[u8]) -> Result<Vec<PrivateKey>, AnyError> {
  let keys = rsa_private_keys(&mut bytes).map_err(|_| key_decode_err())?;
  Ok(keys.into_iter().map(PrivateKey).collect())
}

/// Starts with -----BEGIN PRIVATE KEY----",275,281,18,43,,,,,
tencent QQ,腾讯QQ,,test_ffi/tests/integration_tests.rs,4294967295,0,2.45," 4294967295 ",112,112,15,26,,,,,
tencent QQ,腾讯QQ,,test_ffi/tests/integration_tests.rs,4294967295,0,2.45," 4294967295 ",113,113,15,26,,,,,
tencent QQ,腾讯QQ,,test_napi/date_test.js,1549183351,0,2.45," 1549183351)",16,16,57,68,,,,,
tencent QQ,腾讯QQ,,test_ffi/tests/test.js,4294967295,0,2.45," 4294967295,",575,575,17,28,,,,,
tencent QQ,腾讯QQ,,test_ffi/tests/test.js,4294967296,0,2.25," 4294967296,",575,575,29,40,,,,,
private-key,证书--Private Key,,tools/wpt/certs/cacert.key,"-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIFHzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQIiXlaXg3yauACAggA
MB0GCWCGSAFlAwQBKgQQMqGs3Ec13AqQkSvVLb47vgSCBNAhdAsbb4/SpmbL02DB
QX6g6owDLutgUL3KrkYFipTo9jWoakzrJaNuGnz/uRZP3tTD2XqjvH5ILs7BBZ/w
iMGOnjy+ZkRE361MJgMo+9199Ge/GqHhhxp/j0DziJNq4CEpWFcBP+fSRCjpMQzX
6lVrf39XpfsT9n+m2deEGHxMLoxhiaF9uxCAAaEK7E/l9ifCusbOGeWQkFvP61xT
mmotO8jOzb1bQ7OPjuHkW5PEjgsTSBXOP7tvsJi7M7OoiP0saliZHM76n3V88SKS
aPkMfBxLimSpzW98H03ATZOvKJv0TLBJngukMZVj2aJjhw/+ojuoHbAYTyZ+vysp
QGy1vdPf8H59ORBt2Bb97SVFaKK2/ZhIF/u+KSKMUfbyOL0vh8I3BkQQX22s7YER
TmWf563s+viMfE3GkHcIK+8uzkCGAj2DJNdXrnYTZz4rfOwe9SkH2H3yDxJW12wm
iX7gwthyqQ7oRKSYxUBOuKSa/xAom2p7OyeNUukBgvMa+afNtGouGzp57cnSZXQ3
aNDECWBXwd5bhS0tZ4XBaEGaBAY4jV+EI/WVdpVx/xPaWsHHTsbX9n1he0Da+HtJ
9otEJe+9Cmv1xkthvH7PaXzI1KbWSZqzCfZ/HkDHs8fsrDl0WIZV/+Z1LDlLvmNp
3ldd8mO4Ai2qdIVesLzfRSmQ3r5zTA36v747H5nwwcWbbPg+RJdfdV1Hl79kZSqr
xzferKE8js5mGu7zHsMfHr8pupZrtjBGjeZfdOuPnDUFw1IhsljIAKH2lrCWgxHQ
+WmpkAbKtJayCzqo8IUpB2TLcgfvRyJG994bmzoEjYQlW980pVv77K+44mziaRFy
BvBsSE2jqD+QlQNcFT0E+F9S/peLLL0M0G7u7fwrYXjtumioLszCrIqSxpFDqjo1
C1ZbX+NBi5fKoTwz0ZaT1ps4wLZH4Eu/qZQU6u4CEum8q8oSACPAHAX2QcqaYcoz
QQX0KiWIweWZDsw+A/VPiyQbSnFL1O/vhDDy67H0HfbRkad2/H2JU6SQAwL7/7b5
pHNmvC5ypLm1gdua7Nv1jg6Z7+oOvTc65mzXbuf2Ig5ZhwUIhHtn9U2kZHndlK3y
6032Ty7s98wO4hXyp72+C1hFF+laUnPJoM09y6fdD84o5x4ddRM26WaaJHdmxhzm
VvVeY4ui5LRFNheTLpRfv2NKpT7FY6KyfM1Rx4hc4D2oU0rG7LQd9PwyrIltwhwe
mEC/qbo4RKfjdGoX2PKkBYDuMI1EuGVWcUHt+CS9cExOsA/Bt/mF1yZuFlBYZRqk
VqDjs7SUYvlEVUksx0lTcoQ0oJkGSBhuNaaWVHe6cJBgADBBFedzK8u4Sxx2QgFM
SwZGTx8UWuA3LNyYtMxER957joUPvrpYIkuBW6cGB3At5YZmYuKt6lmR+wEXl1Ew
aWcUjBUDjLYZ/OVqJ3ZWzCkJh2ZQLfj9M1zPRiJp59ThHMF8hFliot6BLi4H5MGs
Tvc8OF8b8ZaCgfGIUmdI3Gr0o5IcPO516n/HOXgn8hx9kQsVJckRAGpDQZXW3B3M
iZHppcLhqIPleV+0VwjDdWuwGMVNzMTlV8RV/N/pJmDR8DUiSKfeSCSUP9mYkBNb
yjhQG3W27ATKHJx3Dm9mVpoEtA==
-----END ENCRYPTED PRIVATE KEY----",0,6.04,"-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIFHzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQIiXlaXg3yauACAggA
MB0GCWCGSAFlAwQBKgQQMqGs3Ec13AqQkSvVLb47vgSCBNAhdAsbb4/SpmbL02DB
QX6g6owDLutgUL3KrkYFipTo9jWoakzrJaNuGnz/uRZP3tTD2XqjvH5ILs7BBZ/w
iMGOnjy+ZkRE361MJgMo+9199Ge/GqHhhxp/j0DziJNq4CEpWFcBP+fSRCjpMQzX
6lVrf39XpfsT9n+m2deEGHxMLoxhiaF9uxCAAaEK7E/l9ifCusbOGeWQkFvP61xT
mmotO8jOzb1bQ7OPjuHkW5PEjgsTSBXOP7tvsJi7M7OoiP0saliZHM76n3V88SKS
aPkMfBxLimSpzW98H03ATZOvKJv0TLBJngukMZVj2aJjhw/+ojuoHbAYTyZ+vysp
QGy1vdPf8H59ORBt2Bb97SVFaKK2/ZhIF/u+KSKMUfbyOL0vh8I3BkQQX22s7YER
TmWf563s+viMfE3GkHcIK+8uzkCGAj2DJNdXrnYTZz4rfOwe9SkH2H3yDxJW12wm
iX7gwthyqQ7oRKSYxUBOuKSa/xAom2p7OyeNUukBgvMa+afNtGouGzp57cnSZXQ3
aNDECWBXwd5bhS0tZ4XBaEGaBAY4jV+EI/WVdpVx/xPaWsHHTsbX9n1he0Da+HtJ
9otEJe+9Cmv1xkthvH7PaXzI1KbWSZqzCfZ/HkDHs8fsrDl0WIZV/+Z1LDlLvmNp
3ldd8mO4Ai2qdIVesLzfRSmQ3r5zTA36v747H5nwwcWbbPg+RJdfdV1Hl79kZSqr
xzferKE8js5mGu7zHsMfHr8pupZrtjBGjeZfdOuPnDUFw1IhsljIAKH2lrCWgxHQ
+WmpkAbKtJayCzqo8IUpB2TLcgfvRyJG994bmzoEjYQlW980pVv77K+44mziaRFy
BvBsSE2jqD+QlQNcFT0E+F9S/peLLL0M0G7u7fwrYXjtumioLszCrIqSxpFDqjo1
C1ZbX+NBi5fKoTwz0ZaT1ps4wLZH4Eu/qZQU6u4CEum8q8oSACPAHAX2QcqaYcoz
QQX0KiWIweWZDsw+A/VPiyQbSnFL1O/vhDDy67H0HfbRkad2/H2JU6SQAwL7/7b5
pHNmvC5ypLm1gdua7Nv1jg6Z7+oOvTc65mzXbuf2Ig5ZhwUIhHtn9U2kZHndlK3y
6032Ty7s98wO4hXyp72+C1hFF+laUnPJoM09y6fdD84o5x4ddRM26WaaJHdmxhzm
VvVeY4ui5LRFNheTLpRfv2NKpT7FY6KyfM1Rx4hc4D2oU0rG7LQd9PwyrIltwhwe
mEC/qbo4RKfjdGoX2PKkBYDuMI1EuGVWcUHt+CS9cExOsA/Bt/mF1yZuFlBYZRqk
VqDjs7SUYvlEVUksx0lTcoQ0oJkGSBhuNaaWVHe6cJBgADBBFedzK8u4Sxx2QgFM
SwZGTx8UWuA3LNyYtMxER957joUPvrpYIkuBW6cGB3At5YZmYuKt6lmR+wEXl1Ew
aWcUjBUDjLYZ/OVqJ3ZWzCkJh2ZQLfj9M1zPRiJp59ThHMF8hFliot6BLi4H5MGs
Tvc8OF8b8ZaCgfGIUmdI3Gr0o5IcPO516n/HOXgn8hx9kQsVJckRAGpDQZXW3B3M
iZHppcLhqIPleV+0VwjDdWuwGMVNzMTlV8RV/N/pJmDR8DUiSKfeSCSUP9mYkBNb
yjhQG3W27ATKHJx3Dm9mVpoEtA==
-----END ENCRYPTED PRIVATE KEY----",1,30,1,35,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,tools/wpt/certs/cacert.key,qZQU6u4CEum8q8oSACPAHAX2QcqaYcoz,0,4.33,qZQU6u4CEum8q8oSACPAHAX2QcqaYcoz,18,19,34,1,,,,,
private-key,证书--Private Key,,tools/wpt/certs/web-platform.test.key,"-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDcVQzzTtqXFIAH
fNi6S9Wj2s6BmBmITFWUjETrulYKmIhFTwCY3x7Bt5j4CmVqxEx5C3XZTRuD0T/4
ZZ4SCTly6LpnHfIf1RX2qS1YU/D3MCbUfqAigtstW4S8xaz48TRUBV5KpIrBVN85
2efelS6BQicUMWMXjxQe+Z70FuQ5SSNe2KxkfROTVg/zOWYefcgvGPOTkfUrdVF/
AZB3FZIyEFj/6By7hmCu+mtdjLFMTQL8RJFhsta5YgPsaJb+5vCCnho4v2SAW0O/
Ak8pTdvVjINUMgkc3ljddBzqutDjaC5HVvzjDj49GCsBEYtCjQTLlibX/HpriGmy
eO3mSxdLAgMBAAECggEBANMR7uwOeD0O+G8z3HLrPuhPLlDbomn9pmY90bB4uwA/
ixvKSOoppE8zUKkdXHZhQlka73SR92/Zvwx4XGsuxwgbhqZN+6se+IFpI/VfxJEo
Yapi+4jUDp9u8sPcIo4Ak36B/ghHhF0crxO+ee+yvfA5rTIc9a6V9FKQEwQGAfAV
J1+IW2rRjAlVxHCcYY3Hf5Ov3dKtr7/KRso8Pvaj1yBbliF70x4RYgcVcjF4w491
tErjvfNMXTKVigY6zRUVizzkDug2V+kMmku3SmyjJ51VnnxFD4n2JWkZubxMXfu+
aKXdcJVlWeOVWRWhT4pw+qNKqHABtZ2AqwbPHlkavIECgYEA8c8EfrbZCDlrrevl
suvvAHcA4UqwHPiFw1spwRkiHxym+FT5H6LQUxxdUyxo94nQbnLWaK6FjUVZKH0K
gqvl4ibcZAsPsfeCWSd2aHe//VzCtg6dG2bam3sKgq2oU/fP5VBV0ytK1VaZjc+Z
GbLp040Y54xyI9bLvHnbPYf0gWECgYEA6UNd4iHAKwwCe4MYWplEqxTUQTc2PbFP
Bp1gM2+WYApZqy+DS/dH6qZ1GJ7Uz8k3uhKkN2ZFpP3WlgTVLDHqeReKkSUDIf6E
RJ2wZSYBCSmOMjm77XIj37RgNmLa2AefaTvf+C4BgaOyy+TkOeUJYX065+ByFg9s
OTDooWtK3CsCgYBcff8OKQqjJrOVdyIJak2lM9/WTSdILZecvgYeomp21BLZ8kbI
XxKod7UK13XfGYvsc2in6fmTq+8KmamnifEIrCyo58I9JJtrVrjoBMYfN5gS40wc
6x67UjkW+y3j0GppIG1ztJ+PMuzRXZMGTXU7QkFAcGxIYSTVFxdRVeukgQKBgQDo
J/4mc8TYkwldeCoi8WwggYiGp7a6S+AFC1iVmLenOmXoNE+OqbvP1H+yU1Imw3NN
JASAhq9F+MU7Ze/sHnnorv9gWd/2U2O9DtxiryJUxiEZ59AcEH+Xw+QF/PkmDOAh
UlAkp1Uke5IVz+c9n7BocMTRxtaFEjB58y10il5lJQKBgDFo344NEGF7klwFbP3/
ZJl4QYyWaH3PGaIa4yCrO0Or76L/OQwZy5z7CCFD5p/4MoaqGH/p7KLj+JFrtgPn
Y0MSIYubWafLG1hXjxXQlZqP+OZUJ+C0aMEU45h2uYmSBngo58CbYl1e+OyMt02Z
7I/0TK++5Iudhf0ZgxtlNGKa
-----END PRIVATE KEY----",0,6.02,"-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDcVQzzTtqXFIAH
fNi6S9Wj2s6BmBmITFWUjETrulYKmIhFTwCY3x7Bt5j4CmVqxEx5C3XZTRuD0T/4
ZZ4SCTly6LpnHfIf1RX2qS1YU/D3MCbUfqAigtstW4S8xaz48TRUBV5KpIrBVN85
2efelS6BQicUMWMXjxQe+Z70FuQ5SSNe2KxkfROTVg/zOWYefcgvGPOTkfUrdVF/
AZB3FZIyEFj/6By7hmCu+mtdjLFMTQL8RJFhsta5YgPsaJb+5vCCnho4v2SAW0O/
Ak8pTdvVjINUMgkc3ljddBzqutDjaC5HVvzjDj49GCsBEYtCjQTLlibX/HpriGmy
eO3mSxdLAgMBAAECggEBANMR7uwOeD0O+G8z3HLrPuhPLlDbomn9pmY90bB4uwA/
ixvKSOoppE8zUKkdXHZhQlka73SR92/Zvwx4XGsuxwgbhqZN+6se+IFpI/VfxJEo
Yapi+4jUDp9u8sPcIo4Ak36B/ghHhF0crxO+ee+yvfA5rTIc9a6V9FKQEwQGAfAV
J1+IW2rRjAlVxHCcYY3Hf5Ov3dKtr7/KRso8Pvaj1yBbliF70x4RYgcVcjF4w491
tErjvfNMXTKVigY6zRUVizzkDug2V+kMmku3SmyjJ51VnnxFD4n2JWkZubxMXfu+
aKXdcJVlWeOVWRWhT4pw+qNKqHABtZ2AqwbPHlkavIECgYEA8c8EfrbZCDlrrevl
suvvAHcA4UqwHPiFw1spwRkiHxym+FT5H6LQUxxdUyxo94nQbnLWaK6FjUVZKH0K
gqvl4ibcZAsPsfeCWSd2aHe//VzCtg6dG2bam3sKgq2oU/fP5VBV0ytK1VaZjc+Z
GbLp040Y54xyI9bLvHnbPYf0gWECgYEA6UNd4iHAKwwCe4MYWplEqxTUQTc2PbFP
Bp1gM2+WYApZqy+DS/dH6qZ1GJ7Uz8k3uhKkN2ZFpP3WlgTVLDHqeReKkSUDIf6E
RJ2wZSYBCSmOMjm77XIj37RgNmLa2AefaTvf+C4BgaOyy+TkOeUJYX065+ByFg9s
OTDooWtK3CsCgYBcff8OKQqjJrOVdyIJak2lM9/WTSdILZecvgYeomp21BLZ8kbI
XxKod7UK13XfGYvsc2in6fmTq+8KmamnifEIrCyo58I9JJtrVrjoBMYfN5gS40wc
6x67UjkW+y3j0GppIG1ztJ+PMuzRXZMGTXU7QkFAcGxIYSTVFxdRVeukgQKBgQDo
J/4mc8TYkwldeCoi8WwggYiGp7a6S+AFC1iVmLenOmXoNE+OqbvP1H+yU1Imw3NN
JASAhq9F+MU7Ze/sHnnorv9gWd/2U2O9DtxiryJUxiEZ59AcEH+Xw+QF/PkmDOAh
UlAkp1Uke5IVz+c9n7BocMTRxtaFEjB58y10il5lJQKBgDFo344NEGF7klwFbP3/
ZJl4QYyWaH3PGaIa4yCrO0Or76L/OQwZy5z7CCFD5p/4MoaqGH/p7KLj+JFrtgPn
Y0MSIYubWafLG1hXjxXQlZqP+OZUJ+C0aMEU45h2uYmSBngo58CbYl1e+OyMt02Z
7I/0TK++5Iudhf0ZgxtlNGKa
-----END PRIVATE KEY----",1,28,1,25,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/vue/registry.json,og0vAKT6S8nBlvbCZiYxCliLdZIdDvbV,0,4.48,"og0vAKT6S8nBlvbCZiYxCliLdZIdDvbV""",2,2,1107292,1107324,,,,,
generic-tencent-connect-key-id,应用凭证--Tencent Connect Secret,,cli/tests/testdata/npm/registry/vue/registry.json,TcPt7WJiHXZINyF44uu5eeI701QqiDfc,0,4.56,"TcPt7WJiHXZINyF44uu5eeI701QqiDfc""",2,2,1907127,1907159,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/vue/registry.json,ANX26bmmUQD8kfwO60sZMIQiJ4uuvohHPI48U,0,4.78,"ANX26bmmUQD8kfwO60sZMIQiJ4uuvohHPI48U""",2,2,223798,223835,,,,,
generic-qiye-weixin-developer-app-secret,应用凭证--Qiye WeiXin Developer App Secret,,cli/tests/testdata/npm/registry/vue/registry.json,Lu4GgiB1DuVl6jAS7lDMcoTypB5ABQULqEixS,0,4.70,"Lu4GgiB1DuVl6jAS7lDMcoTypB5ABQULqEixS""",2,2,429330,429367,,,,,
